{"name":"FusionWebApp","tagline":"Rapid Development of Enterprise Web Applications with Java!","body":"FusionWebApp\r\n============\r\n\r\nFusionWebApp is a set of Java Frameworks for Rapid Development of Enterprise Web Applications. It is a project fully configured and ready for you to start your own web applications.\r\nTotally Customizable, it is a maven project built upon the following frameworks:\r\n\r\n+ Jquery EasyUI\r\n+ Sitemesh\r\n+ Spring\r\n+ ActiveJDBC\r\n+ JasperReport\r\n\r\n![FusionWebApp Crud](http://imageshack.com/a/img191/8933/74hs.png)\r\n\r\nSimple, fast, scalable. view layer using lightweight RESTful/json requests. Builds applications that conform to the MVC (Model-View-Controller) architectural paradigm. Start your Java project now!\r\n\r\n## Getting Started\r\n\r\nFirst, download Maven (http://maven.apache.org/download.cgi) and follow the installation instructions (http://maven.apache.org/download.cgi#Installation). After that, type the following in a terminal or in a command prompt:\r\n\r\n```\r\n$ mvn --version\r\n```\r\n\r\nDownload the FusionWebApp and place in a folder of your choice, this will be your project folder. \r\n\r\n```\r\n$ cd MyProjectFolder\r\n$ mvn install\r\n$ mvn package\r\n```\r\n\r\nNow your project can now be started!\r\nWith these commands you should have generated a WAR file. This is all you need to know to generate your project, now let's learn how FusionWebApp works.\r\n\r\n##Database\r\nFusionWebApp use the ActiveJdbc, what is a lightweight and fast Java ORM, its easy query with ActiveJDBC:\r\n\r\n```\r\nList<person> people = Person.where(\"name = 'John'\");\r\nPerson aJohn = people.get(0);\r\nString johnsLastName = aJohn.get(\"last_name\");\r\n```\r\n\r\nCreating new records:\r\n\r\n```\r\nPerson p = new Person();\r\np.set(\"name\", \"Marilyn\");\r\np.set(\"last_name\", \"Monroe\");\r\np.set(\"dob\", \"1935-12-06\");\r\np.saveIt();\r\n```\r\n\r\nYou can learn more about ActiveJDBC here: http://javalt.org/p/activejdbc\r\n\r\n###Configure Database\r\nFusionWebApp has two configuration, the first refers to data migration and is found in the maven **pom.xml**, if you want to use data migration then you need to change this file and put the properties pertaining to your database\r\n\r\n    <properties>\r\n       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n       <jdbc.url>jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8</jdbc.url>\r\n       <jdbc.username>yourdatabaseuser</jdbc.username>\r\n       <jdbc.password>yourdatabasepassword</jdbc.password>\r\n    </properties>\r\n    \r\n    \r\nThe other configuration file is the main settings of the database and the application, for deafult is the **dev.properties**.\r\n\r\n```\r\n#Generate Config\r\napp.package=com.fusion.app\r\n\r\n#Datasource Config\r\njdbc.driver=com.mysql.jdbc.Driver\r\njdbc.url=jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8\r\njdbc.username=yourdatabaseuser\r\njdbc.password=yourdatabasepassword\r\n\r\n#Locale Config\r\napp.locale=en\r\n```\r\n\r\nIn addition to the configuration database is possible to change the default package usable to generates code (scaffold) and internationalization locale.\r\n\r\n###How to Migrate\r\n\r\nFusionWebApp use the CarbonFive Plugin. To create a new migration, execute this command:\r\n\r\n```\r\n$ cd MyProjectFolder\r\n$ mvn db-migration:new -Dname=create_people_table\r\n```\r\n\r\nthis action would create an empty file in this localization:\r\n\r\n```\r\n$ MyProjectFolder\\src\\main\\resources\\db\\migrations\\20101112230703_create_people_table.sql\r\n```\r\nAfter that, add a sql code to the file:\r\n\r\n    CREATE TABLE people (\r\n      id  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\n      first_name VARCHAR(128),\r\n      last_name VARCHAR(128),\r\n      created_at DATETIME,\r\n      updated_at DATETIME\r\n    );\r\n\r\nFrom the command line, you can run the migration plugin like this:\r\n\r\n```\r\n$ mvn db-migration:migrate\r\n```\r\n\r\nYou can get more information about the CarbonFive migration here: https://code.google.com/p/c5-db-migration/wiki/MavenPlugin\r\n\r\n##Environment\r\n\r\n```\r\ncom.fusion.app\r\n    controllers\r\n    models\r\n    services\r\n\r\nWEB-INF/\r\n    view/layouts/application.jsp\r\n    spring-mvc-servlet.xml\r\n            \r\nresources/            \r\n    db.migrations   \r\n    dev.properties\r\n    prod.properties\r\n    messages_en.properties\r\n    \r\n```\r\n\r\nWith FusionWebApp is possible have many separate environments, by default we have two environments, prod.properties and dev.properties, you can choose between them in the file **spring-mvc-servlet.xml**:\r\n\r\n```\r\n<bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n    <property name=\"locations\">\r\n        <list>\r\n            <value>classpath:dev.properties</value>\r\n        </list>\r\n    </property>\r\n</bean>\r\n```\r\n\r\n###View\r\nWe chose to use Jquery EasyUI in our view layer, Jquery is commonly usable in many web projects, have a large library and a strong opensource community. Your project will be ready for Ajax, rest/json, HTML5 and much more!\r\n\r\nWe also used Sitemesh to manage the layouts, there is a single file **application.jsp** and all others views are rendered inside that file.\r\n\r\nYou can learn more about Jquery EasyUI here: http://www.jeasyui.com/\r\n\r\n###Controller\r\n\r\nWe choose Spring why it help structure whole applications, productive manner, pulling together best-of-breed single-tier frameworks to create a coherent architecture, using standard RESTful: /list, /save/, /update/{id}, /destroy/{id}.\r\n\r\n```\r\n@RequestMapping(value = \"/save\", method = RequestMethod.POST)\r\npublic @ResponseBody Map<String,String> save(@RequestParam Map<String,String> params) {\r\n \r\n  return personService.save(params);\r\n \r\n}\r\n```\r\n\r\nYou can learn more about Spring MVC here: http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html\r\n\r\n###Scaffold\r\n\r\nWith FusionWebApp is possible to generate a complete CRUD code with *model, controller, service layer and view layer*. All code generated is easily customized, FusionWebApp comes with a crud (Person - people) built, simply run the migrate database to test it. \r\nTo generate a CRUD type the following in a terminal or in a command prompt:\r\n\r\n```\r\n$ cd MyProjectFolder\r\n$ mvn exec:java -Dexec.args=\"-m=Person\"\r\n```\r\n\r\nSimple as that! The Generator read you table metadata, in this case people and create to you a complete crud, go to url /people and see it!.\r\n\r\n![FusionWebApp Crud2](http://imageshack.com/a/img577/1306/sc0c.png)\r\n\r\nOthers arguments can be passed, to choose the desired table:\r\n\r\n```\r\n$ cd MyProjectFolder\r\n$ mvn exec:java -Dexec.args=\"-m=Person -t=mytable\"\r\n```\r\n\r\nor `-np` to no pluralize\r\n\r\n```\r\n$ cd MyProjectFolder\r\n$ mvn exec:java -Dexec.args=\"-m=Person -np\"\r\n```\r\n\r\nThe code generator is free and opensource, it is in the package scaffold.generate, feel free to customize whenever you need.\r\n\r\n\r\n##Why use FusionWebApp\r\n\r\nThere are several frameworks with the same proposal for rapid development, but FusionWebApp, uses what already exists and works in the market.\r\nThat way you can learn more and more, if you develop a project using FusionWebApp, your experience will be with Jquery, Spring, ActiveJDBC, Maven, JaspeReport and more.\r\nCreate incredible web applications and be ready for the market at the same time.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}